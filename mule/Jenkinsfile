def artifactName
def version
pipeline {
  agent {
    kubernetes {
      label 'mule'
      yamlFile 'mule/kubernetes.yaml'
    }
  }
  stages {
    stage ('checkout SCM') {
      steps{
        container('jnlp'){
        script{
          echo "Checking out from branch "+"${branch}"
          timeout(time: Integer.parseInt("$gitclone_timeout"), unit: 'SECONDS') {
            retry(3) {
              checkout([$class: 'GitSCM', branches: [[name: '*/'+"$branch"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'bitbucket to jenkins', url: "$application_git_url"]]])
              pom = readMavenPom file: 'pom.xml'
              artifactName = readMavenPom().getArtifactId()
              version = readMavenPom().getVersion()
              groupName = readMavenPom().getGroupId()
            }
          }
        }
        }
      }
    }
    stage('Test') {
      steps{
        container('maven'){
        script{
	  configFileProvider([configFile(fileId: 'maven_settings', variable: 'MAVEN_SETTINGS_FILE')]) {
                  sh "mvn -s '$MAVEN_SETTINGS_FILE' clean test"
         }
        }
      }
    }
    }
    stage('build') {
      steps{
        container('maven'){
        script{
	  configFileProvider([configFile(fileId: 'maven_settings', variable: 'MAVEN_SETTINGS_FILE')]) {
                  sh "mvn -s '$MAVEN_SETTINGS_FILE' clean package -DskipTests"
         }
        }
      }
    }
    }
    stage('uploadToNexus') {
      steps{
        script{
          dir('target')
          {
            nexusArtifactUploader artifacts: [[
            artifactId: "$artifactName", 
            classifier: '', 
            file: "$artifactName-$version-mule-application.jar", 
            type: 'jar']], 
            credentialsId: 'nexus', 
            groupId: "$groupName", 
            nexusUrl: 'https://nexus.k8s.dev.ms3-inc.com', 
            nexusVersion: 'nexus3', 
            protocol: 'https', 
            repository: 'maven-snapshots', 
            version: "$version"
          }
        }
      }
    }
    stage('deploy to anypoint') {
      steps{
        container('anypoint-cli'){
        script{
          withCredentials([usernamePassword(credentialsId: 'anypointplatform', passwordVariable: 'anypoint_pass', usernameVariable: 'anypoint_user')])
          {
             dir('target')
             {
                sh 'anypoint-cli --username=${anypoint_user} --password=${anypoint_pass} --environment='+"$anypoint_environment"+' runtime-mgr standalone-application deploy mulesoft-test-75c4d76d9f-r6kt8 '+"$artifactName"+' '+"$artifactName"+'-'+"$version"+'-mule-application.jar'
                }
          }
        }
      } 
  }
}
  }
}
